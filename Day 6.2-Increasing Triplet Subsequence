Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: One of the valid triplet is (3, 4, 5), because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
%%%%%%%%%%%% solution %%%%%%%%%%%%%%%%%%
class Solution {
    public boolean increasingTriplet(int[] nums) 
    {
        int a=Integer.MAX_VALUE;
        int b=Integer.MAX_VALUE;
        for(int x : nums)
        {
            if(x<=a)
            {
                a=x;
            }
            else if(x<=b)
            {
                b=x;
            }
            else{
                return true;
            }
        }
        return false;

    }
}
above take 3 msec  but the below take 1ms 
class Solution {
    public boolean increasingTriplet(int[] nums) {
        if(nums == null || nums.length < 3) return false;   (logic same but where we give conditions based on this it take times
        int a = Integer.MAX_VALUE;
        int b = Integer.MAX_VALUE;
        for(int num : nums) {
          if(num <= a){
            a = num;
          }  
          else if(num <= b){
           b = num;
          }
          else return true;
        } 
        return false;
    }
}
