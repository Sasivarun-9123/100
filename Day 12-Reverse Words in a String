Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.
%%%%%%%%%%%% Solution %%%%%%%%%%%%%%
class Solution:
    def reverseWords(self, s: str) -> str:
        s=s.strip()
        st=list(map(str,s.split()))
        st=st[::-1]
        n=len(st)
        r=""
        for i in range(n):
            if(i==n-1):
                r+=st[i]
            else:
                r+=st[i]+" "
        return r
%%%%%%%%%%%%%% Java Solution $$$$$$$$$$
class Solution {
    public String reverseWords(String s) {
        // 1. Trim leading and trailing spaces
        s = s.trim();
        
        // 2. Split by one or more spaces
        String[] words = s.split("\\s+");
        
        // 3. Reverse the array of words
        StringBuilder sb = new StringBuilder();
        for (int i = words.length - 1; i >= 0; i--) {
            sb.append(words[i]);
            if (i > 0) {
                sb.append(" ");
            }
        }
        
        // 4. Return the reversed string
        return sb.toString();
    }
}
%%%%%%%%%%%% Less time &&&&&&&&&&
class Solution {
    public String reverseWords(String s) {
     if(s==null){
        return null;
     }
     char[] arr = s.toCharArray();
     char[]  rev = new char[arr.length];
     int indx = reverse(arr,rev,0);
     return new String(rev,0,indx);
    }

    public int reverse(char[] arr,char[] rev, int start){
        while(start < arr.length && arr[start]==' '){
            start++;
        }
        int end = start;
        while (end < arr.length && arr[end]!=' '){
          end++;
        }
        if(start==end){
            return 0;
        }
        int revLength = reverse(arr,rev,end);
        if(revLength!=0){
            rev[revLength++] = ' ';
        }
        while(start<end){
            rev[revLength++] = arr[start++];
        }
        return revLength;
    }
}
