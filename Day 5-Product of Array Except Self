Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
%%%%%%%%%%%%%%% Solution %%%%%%%%%%%%%%%%%%%%
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] a = new int[n];
        int c=0,p=1;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
            {
                c+=1;
                continue;
            }
            p=p*nums[i];
        }
        if(c>1)
        {
            return a;
        }
        else{
            if(c==1)
            {
                for(int j=0;j<n;j++)
                {
                    if(nums[j]==0)
                    {
                       a[j]=p;
                    }
                }
            }
            else{
                for(int k=0;k<n;k++)
                {
                    a[k]=p/nums[k];
                }
            }
        }
        return a;
    }
}
%%%%%%%%%%%%%%%%%%%%%%%%%%   I don't use this ( %%%%%%%%% %%%%%%%%

class Solution {
    public int[] productExceptSelf(int[] x) {
        int n = x.length;
        int[] a = new int[n];

        a[0] = 1;
        for (int i = 1; i < n; i++) {
            a[i] = a[i - 1] * x[i - 1];
        }

        int s = 1;
        for (int i = n - 1; i >= 0; i--) {
            a[i] = a[i] * s;
            s = s * x[i];
        }

        return a;
    }
}
