Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:

0 <= n <= 105
  %%%%%%%%%% Solution %%%%%%%%%%%%%
  class Solution {
    static int  count(int n)
    {
        int c=0;
        while(n>0)
        {
            n=n&(n-1);
            c++;
        }
        return c;
    }
    public int[] countBits(int n) {
        int[] a=new int[n+1];
        for(int i=0;i<=n;i++)
        {
           a[i]=count(i);
        }
        return a;   
 }
}
%%%%%%%%%%% Reverse Bit %%%%%%%%%%%%
  Reverse bits of a given 32 bits signed integer.

 

Example 1:

Input: n = 43261596

Output: 964176192

Explanation:

Integer	Binary
43261596	00000010100101000001111010011100
964176192	00111001011110000010100101000000
Example 2:

Input: n = 2147483644

Output: 1073741822

Explanation:

Integer	Binary
2147483644	01111111111111111111111111111100
1073741822	00111111111111111111111111111110
 

Constraints:

0 <= n <= 231 - 2
n is even.
  class Solution:
    def reverseBits(self, n: int) -> int:
        s=str(bin(n))[2:]
        s='0'*(32-len(s))+s
        s=s[::-1]
        return int(s,2)
